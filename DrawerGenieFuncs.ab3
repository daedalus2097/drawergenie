; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "DrawerHelper"
; ExeFile         = "DrawerHelper"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 436
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1076
; CursorColumn    = 5
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA

; *** Functions for DrawerGenie.ab3

Function.w listtoolbars{}
  SHARED prefs, toolbar$()
  result.w = 0
  tbdir$ = dos_AddPart{prefs\homedir, "Toolbars"}

  CNIF #debug
    NPrint "Checking dir ", tbdir$, " for toolbars"
  CEND

  ;quit.b = False
  Repeat
    tbname$ = dos_ScanDir{tbdir$, "~(#?.info)", #dos_scan_files}
    If tbname$ <> ""
      ;If LCase$(Right$(tbname$, 5)) <> ".info"
      ;  quit = True
      ;Else
        If AddItem(toolbar$())
          toolbar$() = dos_FilePart{tbname$}
          result + 1
          CNIF #debug
            NPrint "Toolbar found: ", toolbar$()
          CEND
        End If
      ;End If
    End If
  Until tbname$ = ""
  Function Return result
End Function


Function.w getnewhelperid{}
  SHARED helpers()
  result.w = 0
  For i.w = 1 To #maxhelpers
    If helpers(i)\inuse = False
      result = i
      i = #maxhelpers
    End If
  Next i
  Function Return result
End Function


Function.w nexthelper{currenthelper.w}
  SHARED helpers()
  result.w = 0;currenthelper
  count.w = 0
  helperid.w = currenthelper
  For i.w = 1 To #maxhelpers
    helperid + 1
    If helperid > #maxhelpers Then helperid = 1
    If helpers(helperid)\inuse
      result = helperid
      i = #maxhelpers
    End If
  Next i
  Function Return result
End Function


Function.w helperopen{winaddr.l}
  SHARED helpers()
  result.w = 0
  For i.w = 1 To #maxhelpers
    If helpers(i)\inuse
      If helpers(i)\hostwinaddr = winaddr
        result = i
        i = #maxhelpers
      End If
    End If
  Next i
  Function Return result
End Function


Statement setsource{helperid.w}
  SHARED helpers(), sourcewin, destwin
  sourcewin = helperid
  helpers(helperid)\source = 1
  If helpers(helperid)\dest
    helpers(helperid)\dest = 0
    GTToggle helperid, #dest, 0
    destwin = 0
  End If

  For i.w = 1 To #maxhelpers
    If helpers(i)\source
      If i <> helperid
        helpers(i)\source = 0
        GTToggle i, #source, 0
      End If
    End If
  Next i
End Statement


Statement setdest{helperid.w}
  SHARED helpers(), sourcewin, destwin
  destwin = helperid
  helpers(helperid)\dest = 1
  If helpers(helperid)\source
    helpers(helperid)\source = 0
    GTToggle helperid, #source, 0
    sourcewin = 0
  End If

  For i.w = 1 To #maxhelpers
    If helpers(i)\dest
      If i <> helperid
        helpers(i)\dest = 0
        GTToggle i, #dest, 0
      End If
    End If
  Next i

End Statement


Function.b windowadjusted{}
  result.b = 0

  Function Return result
End Function


Statement adjustwindow{helperid.w}
  SHARED helpers()

  ; This only moves up either by a pixel, by a page, or by a proportion (1/8th) of the Window size. No option For 18 pixels...
  arexx_SendMessage{"WORKBENCH", "VIEW \\22" + helpers(helperid)\path + "\\22 UP"}

End Statement


Statement unadjustwindow{helperid.w}
  SHARED helpers()

  ; This only moves up either by a pixel, by a page, or by a proportion (1/8th) of the Window size. No option For 18 pixels...
  arexx_SendMessage{"WORKBENCH", "VIEW \\22" + helpers(helperid)\path + "\\22 DOWN"}

End Statement


Statement removehelper{helperid.w}
  SHARED helpers(), prefs

  ; Check if any outstanding tasks for this helper?
  If helpers(helperid)\inuse
    DetachGTList helperid
    CloseWindow helperid
    Free GTList helperid
    helpers(helperid)\inuse = False
    If prefs\scrolldown
      unadjustwindow{helperid}
    End If
  Else
    CNIF #debug
      NPrint "Warning: Tried to close helper that wasn't in use"
    CEND
  End If
End Statement


; Include a helper ID of 0 to pick next available ID, include an actual ID and it will only succeed if that ID is available
; Include a helper ID to copy the history over from that helper
Function.w addhelper{copyhistory.w} ;helper.w}
  SHARED helpers(), prefs, *ibase, borderwidths, gadgets(), sourcewin, destwin, lastgadget, wbwindows()
  result.w = False
  DEFTYPE .wbwindow rexxwindow, intuiwindow

  ;iblock.l = LockIBase_(0)
  arexx_SendMessage{"WORKBENCH", "GETATTR WINDOWS.ACTIVE"}
  winname$ = arexx_GetResultString{}
  If winname$ <> "" AND winname$ <> "root"
    arexx_SendMessage{"WORKBENCH", "GETATTR WINDOW.LEFT NAME \\22" + winname$ + "\\22"}
    rexxwindow\winx = Vallong(arexx_GetResultString{})
    arexx_SendMessage{"WORKBENCH", "GETATTR WINDOW.TOP NAME \\22" + winname$ + "\\22"}
    rexxwindow\winy = Vallong(arexx_GetResultString{})
    arexx_SendMessage{"WORKBENCH", "GETATTR WINDOW.WIDTH NAME \\22" + winname$ + "\\22"}
    rexxwindow\winw = Vallong(arexx_GetResultString{})
    arexx_SendMessage{"WORKBENCH", "GETATTR WINDOW.HEIGHT NAME \\22" + winname$ + "\\22"}
    rexxwindow\winh = Vallong(arexx_GetResultString{})
    rexxwindow\title = winname$

    ef.b = False
    iblock.l = LockIBase_(0)
    *currentwin.Window = *ibase\ActiveWindow
    If *currentwin\LeftEdge <> rexxwindow\winx Then ef + 1
    If *currentwin\TopEdge <> rexxwindow\winy Then ef + 2
    If *currentwin\Width <> rexxwindow\winw Then ef + 4
    If *currentwin\Height <> rexxwindow\winh Then ef + 8

    name$ = Peek$(*currentwin\Title)
    UnlockIBase_ iblock

    USEPATH helpers(newhelperid)

    If ef = 0
      helpercheck.w = helperopen{*currentwin}
      If helpercheck ; There's already a helper open for this window
        removehelper{helpercheck}
        CNIF #debug
          NPrint "Helper already open at ID ", helpercheck, ", position updated"
        CEND

      Else ; This is a new helper window
        newhelperid.w = getnewhelperid{}

        If newhelperid
          If copyhistory
            CNIF #debug
              NPrint "Copying history from helper ", copyhistory
            CEND
            For i.w = 0 To #maxhistory - 1
              \history[i] = helpers(copyhistory)\history[i]
            Next i
            \historystart = helpers(copyhistory)\historystart
            \historycount = helpers(copyhistory)\historycount
            \historycurrent = helpers(copyhistory)\historycurrent



          Else ; erase the history
            \historycount = 0
            \historycurrent = 0
          End If

          \inuse = True
          \hostwinaddr = *currentwin
          CNIF #debug
            NPrint "Opening new helper ID ", newhelperid
            NPrint "Win top border: ", *currentwin\BorderTop
            NPrint "Win right border: ", *currentwin\BorderRight
          CEND
          \winx = rexxwindow\winx
          \winy = rexxwindow\winy
          \winw = rexxwindow\winw
          \winh = rexxwindow\winh
          \title = name$
          \path = rexxwindow\title

          \helperx = \winx + *currentwin\BorderLeft ;borderwidths\left
          \helpery = \winy + *currentwin\BorderTop ;borderwidths\top
          \helperw = \winw - *currentwin\BorderLeft - *currentwin\BorderRight ;borderwidths\left - borderwidths\right - 12
          \helperh =  prefs\gadgeth + 2;18


          flags.l = #WFLG_BORDERLESS
          \helperwinaddr = Window(newhelperid, \helperx, \helpery, \helperw, \helperh, flags, "", 1, 2)
          DefaultOutput

          If \helperwinaddr
            GTGZZPosition On
            xpos.w = 1
            For i.w = 0 To lastgadget ;#maxgadgets - 1
              If gadgets(i) > 0
                CNIF #debug
                  NPrint "Creating gadget ", gadgets(i)
                CEND
                If gadgets(i) = 999
                  ;NPrint "Drawing spacer"
                  ;spacerx.w = xpos + prefs\spacerw / 2 - 1
                  ;Wline spacerx, 5, spacerx, prefs\gadgeth - 5, 2
                  ;Wline spacerx + 1, 5, spacerx + 1, prefs\gadgeth - 5, 1

                  ;Wline
                  ;GTBevelBox newhelperid, xpos + prefs\spacerw / 2 - 2, 3, 4, prefs\gadgeth - 6, 1
                  xpos + prefs\spacerw
                Else
                  If gadgets(i) = #source OR gadgets(i) = #dest
                    flags = $2000
                  Else
                    flags = 0
                  End If
                  flags + $80 ; Report gadget down event
                  succ.l = GTShape(newhelperid, gadgets(i), xpos, 1, flags, gadgets(i), gadgets(i) + #selectedoffset)
                  xpos + prefs\gadgetw ; 16
                End If
              End If
            Next i

            AttachGTList newhelperid, newhelperid
            GTBevelBox newhelperid, 0, 0, \helperw, \helperh, 0
            ;GTDisable newhelperid, 1
            If prefs\scrolldown
              adjustwindow{newhelperid}

            End If
            result = newhelperid ;True

            If copyhistory
              ; Also copy src/dst status and disable status from previous helper
              CNIF #debug
                NPrint "Copying src/dest, src: ", sourcewin, ", dest: ", destwin, ", oldwin: ", copyhistory
              CEND
              If destwin = copyhistory
                CNIF #debug
                  NPrint "Setting new window as destination"
                CEND
                GTToggle newhelperid, #dest, On
                setdest{newhelperid}
              End If

              If sourcewin = copyhistory
                CNIF #debug
                  NPrint "Setting new window as source"
                CEND
                GTToggle newhelperid, #source, On
                setsource{newhelperid}
              End If
                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                            
            End If
          Else
            Request "DrawerGenie", "Error - Unable to open helper window", "Cancel"
            \inuse = False
          End If
        End If
      End If
    Else
      CNIF #debug
        NPrint "Window dimension mismatch between Rexx and Intuition, aborting (", ef, ")"
        NPrint "X: ", rexxwindow\winx
        NPrint "Y: ", rexxwindow\winy
        NPrint "W: ", rexxwindow\winw
        NPrint "H: ", rexxwindow\winh
      CEND
    End If
  End If

  CNIF #debug
    NPrint "Intuition name: ", name$
    NPrint "Rexx name: ", rexxwindow\title
  CEND

  Function Return result
End Function


Function.b helperstatus{helperid.w}
  SHARED helpers(), taglist()
  USEPATH helpers(helperid)
  result.b = 0
  *checkwin.Window = \hostwinaddr
  If *checkwin\LeftEdge <> \winx
    \winx = *checkwin\LeftEdge
    result | %1
  End If
  If *checkwin\TopEdge <> \winy
    \winy = *checkwin\TopEdge
    result | %1
  End If
  If *checkwin\Width <> \winw
    \winw = *checkwin\Width
    result | %10
  End If
  If *checkwin\Height <> helpers(helperid)\winh
    \winh = *checkwin\Height
    result | %100
  End If

  res.l = 0
  taglist(0)\ti_Tag = #WBCTRLA_IsOpen, &res
  taglist(1)\ti_Tag = #TAG_DONE
  WorkbenchControlA_ &helpers(helperid)\path, &taglist(0)
  If res = 0
    result = 16
  End If

  Function Return result
End Function


Function.w getselectediconsarexx{ew.w}
  SHARED helpers(), iconlist()

  result.w = 0
  path$ = helpers(ew)\path

  If Right$(helpers(ew)\path, 1) <> ":" AND Right$(helpers(ew)\path, 1) <> "/"
    path$ + "/"
  End If

  cmd$ = "GETATTR WINDOW.ICONS.SELECTED.COUNT NAME \\22" + path$ + "\\22"
  arexx_SendMessage{"WORKBENCH", cmd$}
  res$ = arexx_GetResultString{}
  iconcount.w = Vallong(res$)
  CNIF #debug
    NPrint "Sent command: ", cmd$
    NPrint "ARexx result: ", res$
    NPrint "ARexx icons counted: ", iconcount
  CEND

  For i.w = 0 To iconcount - 1
    cmd$ = "GETATTR WINDOW.ICONS.SELECTED." + Str$(i) + ".NAME NAME \\22" + path$ + "\\22"
    arexx_SendMessage{"WORKBENCH", cmd$}
    res$ = arexx_GetResultString{}

    CNIF #debug
      NPrint "Query ", i, " sent: ", cmd$
      NPrint "Result: ", res$
    CEND
    name$ = dos_AddPart{path$, res$}
    If AddItem(iconlist())
      iconlist()\path = name$
      If dos_IsDir{name$}
        iconlist()\kind = #WBDRAWER
      Else
        iconlist()\kind = 0
      End If

    End If
  Next i

  result = iconcount
  Function Return result
End Function


Function.w getselectedicons{ew.w}
  SHARED helpers(), iconlist(), taglist()
  DEFTYPE .List *seliconslist
  DEFTYPE .Node *node

  result.w = 0
  ClearList iconlist()
  CNIF #debug
    NPrint "Checking for selected icons..."
  CEND
  taglist(0)\ti_Tag = #WBCTRLA_GetSelectedIconList, &*seliconslist
  taglist(1)\ti_Tag = #TAG_DONE
  ;wbres.l = WorkbenchControlA_(0, &taglist(0))
  If WorkbenchControlA_(0, &taglist(0))
  ;If wbres
    CNIF #debug
      NPrint "Listing selected icons..."
    CEND
    If *seliconslist
      *node = *seliconslist\lh_Head
      While *node\ln_Succ
        name$ = Peek$(*node\ln_Name)

        result + 1
        If AddItem(iconlist())
          iconlist()\path = name$
          CNIF #debug
            NPrint name$
          CEND
          If dos_IsDir{name$}
            iconlist()\kind = #WBDRAWER
          Else
            iconlist()\kind = 0
          End If
        End If
        *node = *node\ln_Succ
      End While
    End If

    taglist(0)\ti_Tag = #WBCTRLA_FreeSelectedIconList, *seliconslist
    WorkbenchControlA_ 0, &taglist(0)
  Else
    CNIF #debug
      NPrint "... Error from WBControlA function"
      MaxLen error$ = 128
      err.l = IoErr_()
      succ.l = Fault_ (err, "", &error$, 128)
      NPrint "Error: ", err, " - ", error$
      NPrint "Falling back to ARexx method"
    CEND

    result = getselectediconsarexx{ew}
  End If

  Function Return result
End Function




Statement openprefs{}
  SHARED prefs, prefsopen, fontysize, screenw, screenh, toolbar$()

  winw.w = 500
  winh.w = 225

  flags.l = #WFLG_ACTIVATE|#WFLG_CLOSEGADGET|#WFLG_DEPTHGADGET|#WFLG_DRAGBAR|#WFLG_NEWLOOKMENUS
  *win.Window = Window(0, screenw / 2 - winw / 2, screenh / 2 - winh / 2, winw, winh, flags, "DrawerGenie Preferences", 1, 2)
  If *win
    DefaultOutput
    GTGZZPosition Off
    GTNewLookProp On

    prefsopen = True
    iw.w = InnerWidth
    ih.w = InnerHeight
    butwidth.w = iw / 3 - 7
    buth.w = fontysize + 6
    ;GTCheckBox 0, #p_closeprev, iw - buth - 10, 10, buth, buth, "Close previous drawer", #PLACETEXT_LEFT|$200
    GTCheckBox 0, #p_closeprev, 210, 5, buth, buth, "Close previous drawer", #PLACETEXT_LEFT|$200
    GTCheckBox 0, #p_adjustdrawer, iw - 5 - buth, 5, buth, buth, "Adjust drawer for toolbar", #PLACETEXT_LEFT|$200
    GTString 0, #p_viewer, 60, 30, 150, buth, "Viewer", #PLACETEXT_LEFT, 255, prefs\viewer
    GTButton 0, #p_viewerselect, 210, 30, buth, buth, "?", #PLACETEXT_IN
    GTString 0, #p_homedir, iw - 150 - buth - 5, 30, 150, buth, "Home Dir", #PLACETEXT_LEFT, 255, prefs\homedir
    GTButton 0, #p_homedirselect, iw - 5 - buth, 30, buth, buth, "?", #PLACETEXT_IN
    GTString 0, #p_toolbarhotkey, 130 + buth, 55, 80, buth, "Toolbar Hotkey", #PLACETEXT_LEFT, 25, prefs\toolbarhotkey
    GTString 0, #p_openhotkey, iw - 85, 55, 80, buth, "Open Hotkey", #PLACETEXT_LEFT, 25, prefs\openhotkey
    ;GTInteger 0, #p_pollperiod, iw - 85, 105, 80, buth, "Polling period", #PLACETEXT_LEFT, prefs\pollperiod
    GTSlider 0, #p_pollperiod, iw - 85, 105, 80, buth, "Polling period", #PLACETEXT_LEFT, 1, 20, prefs\pollperiod

    ResetList toolbar$()
    tbcount.w = 0
    currentoption.w = 0
    While NextItem(toolbar$())
      If tbcount > 0
        option$ + "|"
      End If
      option$ + toolbar$()
      If toolbar$() = prefs\toolbar
        currentoption = tbcount
      End If
      tbcount + 1
    End While

    CNIF #debug
      NPrint "Option string: ", option$
    CEND

    GTCycle 0, #p_toolbar, 70, 80, 140 + buth, buth, "Toolbar", #PLACETEXT_LEFT, option$, currentoption

    ;GTString 0, #p_toolbar, 60, 80, 150, buth, "Toolbar", #PLACETEXT_LEFT, 255, prefs\toolbar
    ;GTButton 0, #p_toolbarselect, 210, 80, buth, buth, "?", #PLACETEXT_IN
    GTCheckBox 0, #p_useaiss, iw - 5 - buth, 80, buth, buth, "Use AISS", #PLACETEXT_LEFT|$200

    GTCycle 0, #p_archiver, 70, 105, 140 + buth, buth, "Archiver", #PLACETEXT_LEFT, "Lha|Xad", prefs\archiver

    GTButton 0, #p_edittoolbar, 5, 130, 205 + buth, buth, "Edit Toolbar...", #PLACETEXT_IN
                                                                                                                                                                    

    GTButton 0, #p_save, 5, ih - buth - 5, butwidth, buth, "Save", #PLACETEXT_IN
    GTButton 0, #p_use, iw / 2 - butwidth / 2, ih - buth - 5, butwidth, buth, "Use", #PLACETEXT_IN
    GTButton 0, #p_cancel, iw - butwidth - 5, ih - buth - 5, butwidth, buth, "Cancel", #PLACETEXT_IN

    AttachGTList 0, 0
    GTBevelBox 0, 0, 0, iw, ih, 0
    If prefs\closeprevious
      GTToggle 0, #p_closeprev, On
    End If
    If prefs\scrolldown
      GTToggle 0, #p_adjustdrawer, On
    End If
    If prefs\useaiss
      GTToggle 0, #p_useaiss, On
      GTDisable 0, #p_toolbar
    End If
                                                                                                                                                                                                                                                      


    DefaultOutput

    GTSetMenu 0
  Else
    Request "DrawerGenie", "Error - Unable to open Preferences window", "Cancel"
    CNIF #debug
      NPrint "Error opening prefs window"
    CEND

  End If

End Statement


Statement closeprefs{}
  SHARED prefsopen

  DetachGTList 0
  CloseWindow 0
  Free GTList 0
End Statement


Statement cut{helperid.w}
  SHARED iconlist(), helpers()
  If WriteFile(0, "T:WBCutnPaste")
    FileOutput 0
    NPrint "CUT"
    pt$ = helpers(helperid)\path
    If Right$(pt$, 1) <> ":" ; This is only needed for compatibility with ARexx cut/copy/paste scripts, which should be fixed...
      pt$ + "/"
    End If

    NPrint pt$ ;helpers(helperid)\path
    ResetList iconlist()
    While NextItem(iconlist())
      If dos_PathPart{iconlist()\path} = helpers(helperid)\path
        fl$ = dos_FilePart{iconlist()\path}
        If fl$ <> ""
          NPrint fl$
        End If
      End If
    End While
    CloseFile 0
    DefaultOutput
  Else
    CNIF #debug
      NPrint "Can't open temp file!"
    CEND
  End If
End Statement


Statement copy{helperid.w}
  SHARED iconlist(), helpers()
  If WriteFile(0, "T:WBCutnPaste")
    FileOutput 0
    NPrint "COPY"
    pt$ = helpers(helperid)\path
    If Right$(pt$, 1) <> ":" ; This is only needed for compatibility with ARexx cut/copy/paste scripts, which should be fixed...
      pt$ + "/"
    End If

    NPrint pt$ ;helpers(helperid)\path
    ResetList iconlist()

    While NextItem(iconlist())
      If dos_PathPart{iconlist()\path} = helpers(helperid)\path
        fl$ = dos_FilePart{iconlist()\path}
        If fl$ <> ""
          NPrint fl$
        End If
      End If
    End While
    CloseFile 0
    DefaultOutput
  Else
    CNIF #debug
      NPrint "Can't open temp file!"
    CEND
  End If
End Statement


Statement paste{helperid.w}
  SHARED helpers(), activateflag, prefs

  If ReadFile(0, "T:WBCutnPaste")
    Dim List fname$(0)

    FileInput 0
    task$ = Edit$(10)
    If task$ = "CUT"
      cut.b = True
    Else
      cut.b = False
    End If

    pt$ = Edit$(255)
    fn$ = Edit$(255)

    samedir.b = False
    samevol.b = False
    refreshsrc.b = False
    refreshdest.b = False

    CNIF #debug
      NPrint "*** Action: ", task$
      NPrint "Source: ", pt$
      NPrint "Dest: ", helpers(helperid)\path
    CEND

    srclock.l = Lock_(&pt$, #ACCESS_READ)
    destlock.l = Lock_(&helpers(helperid)\path, #ACCESS_READ)

    If srclock
      If destlock
        samelock.l = SameLock_(srclock, destlock)
        If samelock = #LOCK_SAME
          samedir = True
          CNIF #debug
            NPrint "Same dir!"
          CEND
        End If
        If samelock = #LOCK_SAME_VOLUME
          samevol = True
          CNIF #debug
            NPrint "Same volume!"
          CEND
        End If
        CNIF #debug
          NPrint "Locks obtained"
        CEND
        UnLock_ destlock
      Else
        CNIF #debug
          NPrint "Unable to obtain destination lock"
        CEND
      End If

      UnLock_ srclock
    End If



    copyflags.w = 0
    iconcount.w = 0

    If samevol AND cut ;= True
      copyflags + #c_move
    End If
    If cut
      copyflags + #c_delete
    End If

    If samedir AND cut = False
      copyflags = #c_duplicate
      arexx_SendMessage{"WORKBENCH", "MENU WINDOW \\22" + helpers(helperid)\path + "\\22 INVOKE ICONS.COPY"}
    End If

    While fn$ <> ""
      If AddItem(fname$())
        iconcount + 1
        fname$() = fn$
      End If
      fn$ = Edit$(255)
    End While

    CloseFile 0
    DefaultInput

    If samedir = False
      pathsbuffer.l = AllocMem_(256 * (iconcount + 1) + 4, 0)
      If pathsbuffer
        Poke.w pathsbuffer, iconcount
        Poke.w pathsbuffer + 2, copyflags
        Poke$ pathsbuffer + 4, helpers(helperid)\path
        ResetList fname$()
        For i.w = 0 To iconcount - 1
          If NextItem(fname$())
            Poke$ pathsbuffer + 4 + 256 + i * 256, dos_AddPart{pt$, fname$()}
          End If
        Next i
      Else
        Request "DrawerGenie", "Error - Unable to allocate memory", "Cancel"
      End If

      command$ = "run \\22" + dos_AddPart{prefs\homedir, "DrawerGenieCopy\\22"} + " " + Str$(pathsbuffer) + " >T:test.txt"
      CNIF #debug
        NPrint "Sending: ", Hex$(pathsbuffer), ", Size: ", 4 + 256 + iconcount * 256
      CEND
      Execute_ command$, 0, 0
    End If

    If cut
      dos_Delete{"T:WBCutnPaste"}
    End If
  Else
    CNIF #debug
      NPrint "Can't open temp file!"
    CEND
  End If
End Statement


Statement opendrawer{name$}
  arexx_SendMessage{"WORKBENCH", "WINDOW \\22" + name$ + "\\22 OPEN"}
  arexx_SendMessage{"WORKBENCH", "WINDOW \\22" + name$ + "\\22 ACTIVATE"}
End Statement


Function.s historyback{helper.w}
  SHARED helpers()
  result$ = ""
  If helpers(helper)\historycount > 1
    helpers(helper)\historycount - 1
    helpers(helper)\historycurrent - 1
    If helpers(helper)\historycurrent = -1
      helpers(helper)\historycurrent = #maxhistory - 1
    End If
    result$ = helpers(helper)\history[helpers(helper)\historycurrent]
  End If

  CNIF #debug
    NPrint "History back: count: ", helpers(helper)\historycount, ", current: ", helpers(helper)\historycurrent, ", path: ", result$
  CEND

  Function Return result$
End Function


Statement historyadd{helper.w, name$}
  SHARED helpers()
  If helpers(helper)\historycount < #maxhistory
    helpers(helper)\historycount + 1
  End If

  helpers(helper)\historycurrent + 1
  If helpers(helper)\historycurrent = #maxhistory
    helpers(helper)\historycurrent = 0
  End If
  helpers(helper)\history[helpers(helper)\historycurrent] = name$

  CNIF #debug
    NPrint "History add: count: ", helpers(helper)\historycount, ", current: ", helpers(helper)\historycurrent, ", path: ", name$
  CEND

End Statement


Statement historyclear{helper.w}
  SHARED helpers()
  helpers(helper)\historycount = 0
  helpers(helper)\historycurrent = 0
End Statement


Statement calculatexpos{}
  SHARED prefs, gadgets(), gadgetxpos(), lastgadget
  xpos.w = 0
  For i.w = 0 To lastgadget
    If gadgets(i) = 999
      xpos + prefs\spacerw
    Else
      gadgetxpos(gadgets(i)) = xpos
      xpos + prefs\gadgetw
    End If
  Next i

End Statement


Statement defprefs{}
  SHARED prefs, gadgets(), lastgadget, gadgetxpos()

  lastgadget.w = 30 ; Position of the last gadget in the toolbar

  ; Load in a default layout including all gadgets
  xpos.w = 0
  For i.w = 0 To lastgadget
    Read gadgets(i)
    ;If gadgets(i) = 999
    ;  xpos + 10
    ;Else
    ;  gadgetxpos(gadgets(i)) = xpos
    ;  xpos + 16
    ;End If
  Next i

  Data.w 1, 2, 999, 3, 4, 5, 999, 6, 7, 8, 9, 22, 24, 25, 18, 999, 13, 14, 15, 16, 999, 17, 19, 20, 999, 28, 29, 30, 31, 32, 33


  calculatexpos{}

  prefs\viewer = "SYS:Utilities/Multiview"
  prefs\closeprevious = 1
  prefs\spawnhelper = 1
  prefs\scrolldown = 1
  prefs\findnewwindows = 1
  prefs\toolbarhotkey = "F1"
  prefs\openhotkey = "Shift Return"
  prefs\gadgeth = 16
  prefs\gadgetw = 16
  prefs\useaiss = False
  prefs\toolbar = "default.iff"
  prefs\pollperiod = 5
End Statement


Statement prefsload{}
  SHARED prefs, gadgets(), lastgadget, gadgetxpos()

  ; First set defaults
  defprefs{}

  If ReadFile(0, "ENV:drawergenie.prefs")
    FileInput 0
      prefs\viewer = Edit$(255)
      prefs\closeprevious = Edit(10)
      prefs\spawnhelper = Edit(10)
      prefs\scrolldown = Edit(10)
      prefs\addcopypastemenus = Edit(10)
      prefs\findnewwindows = Edit(10)
      prefs\toolbarhotkey = Edit$(32)
      prefs\openhotkey = Edit$(32)
      lastgadget = Edit(10)
      ;xpos.w = 0
      For i.w = 0 To lastgadget
        gadgets(i) = Edit(10)
        ;If gadgets(i) = 999
        ;  xpos + 10
        ;Else
        ;  gadgetxpos(gadgets(i)) = xpos
        ;  xpos + prefs\gadgetw
        ;End If
      Next i
      prefs\toolbar = Edit$(255)
      ;prefs\gadgetw = Edit(10)
      ;prefs\gadgeth = Edit(10)
      prefs\useaiss = Edit(10)
      prefs\pollperiod = Edit(10)
      If prefs\pollperiod < 1 Then prefs\pollperiod = 5
      prefs\archiver = Edit(10)
      PopInput
    CloseFile 0
  Else
    CNIF #debug
      NPrint "Error - unable to load prefs file"
    CEND
  End If

  prefs\homedir = dos_GetToolString{"HOMEDIR", ""}

End Statement


Statement prefssave{save.b} ; True = save in ENVARC:, false = save in ENV:
  SHARED prefs, gadgets(), lastgadget
  If save
    fn$ = "ENVARC:drawergenie.prefs"
  Else
    fn$ = "ENV:drawergenie.prefs"
  End If

  If WriteFile(0, fn$)
    FileOutput 0
      NPrint prefs\viewer
      NPrint prefs\closeprevious
      NPrint prefs\spawnhelper
      NPrint prefs\scrolldown
      NPrint prefs\addcopypastemenus
      NPrint prefs\findnewwindows
      NPrint prefs\toolbarhotkey
      NPrint prefs\openhotkey
      NPrint lastgadget
      For i.w = 0 To lastgadget
        NPrint gadgets(i)
      Next i
      NPrint prefs\toolbar
      ;NPrint prefs\gadgetw
      ;NPrint prefs\gadgeth
      NPrint prefs\useaiss
      NPrint prefs\pollperiod
      NPrint prefs\archiver
    PopOutput
    CloseFile 0
  Else
    Request "DrawerGenie", "Error - unable to write preferences", "Cancel"
  End If
  dos_SetToolString{"HOMEDIR", prefs\homedir}
End Statement


Statement processtoolbar{}
  SHARED prefs

  If prefs\useaiss
    If dos_CheckAssign{"TBIMAGES:"}
      ef.b = False
      If image_LoadShape{#back, "TBIMAGES:nav_west_h.iff"} = False Then ef = True
      If image_LoadShape{#back + #selectedoffset, "TBIMAGES:nav_west.iff"} = False Then ef = True
      If image_LoadShape{#parent, "TBIMAGES:parent_h"} = False Then ef = True
      If image_LoadShape{#parent + #selectedoffset, "TBIMAGES:parent"} = False Then ef = True
      If image_LoadShape{#cut, "TBIMAGES:cut"} = False Then ef = True
      If image_LoadShape{#cut + #selectedoffset, "TBIMAGES:cut_s"} = False Then ef = True
      If image_LoadShape{#copy, "TBIMAGES:copy"} = False Then ef = True
      If image_LoadShape{#copy + #selectedoffset, "TBIMAGES:copy_s"} = False Then ef = True
      If image_LoadShape{#paste, "TBIMAGES:paste"} = False Then ef = True
      If image_LoadShape{#paste + #selectedoffset, "TBIMAGES:paste_s"} = False Then ef = True
      If image_LoadShape{#refresh, "TBIMAGES:reload"} = False Then ef = True
      If image_LoadShape{#refresh + #selectedoffset, "TBIMAGES:reload_s"} = False Then ef = True
      If image_LoadShape{#newdrawer, "TBIMAGES:newdrawer"} = False Then ef = True
      If image_LoadShape{#newdrawer + #selectedoffset, "TBIMAGES:newdrawer_s"} = False Then ef = True
      If image_LoadShape{#info, "TBIMAGES:info"} = False Then ef = True
      If image_LoadShape{#info + #selectedoffset, "TBIMAGES:info_s"} = False Then ef = True
      If image_LoadShape{#delete, "TBIMAGES:delete"} = False Then ef = True
      If image_LoadShape{#delete + #selectedoffset, "TBIMAGES:delete_s"} = False Then ef = True
      If image_LoadShape{#textview, "TBIMAGES:viewas_list"} = False Then ef = True
      If image_LoadShape{#textview + #selectedoffset, "TBIMAGES:viewas_list_s"} = False Then ef = True
      If image_LoadShape{#iconview, "TBIMAGES:viewas_icons"} = False Then ef = True
      If image_LoadShape{#iconview + #selectedoffset, "TBIMAGES:viewas_icons_s"} = False Then ef = True
      If image_LoadShape{#sortalpha, "TBIMAGES:sortdown"} = False Then ef = True
      If image_LoadShape{#sortalpha + #selectedoffset, "TBIMAGES:sortdown_s"} = False Then ef = True
      If image_LoadShape{#source, "TBIMAGES:reload"} = False Then ef = True
      If image_LoadShape{#source + #selectedoffset, "TBIMAGES:reload_s"} = False Then ef = True
      If image_LoadShape{#dest, "TBIMAGES:reload"} = False Then ef = True
      If image_LoadShape{#dest + #selectedoffset, "TBIMAGES:reload_s"} = False Then ef = True
      If image_LoadShape{#copyto, "TBIMAGES:copyto"} = False Then ef = True
      If image_LoadShape{#copyto + #selectedoffset, "TBIMAGES:copyto_s"} = False Then ef = True
      If image_LoadShape{#moveto, "TBIMAGES:movetofolder"} = False Then ef = True
      If image_LoadShape{#moveto + #selectedoffset, "TBIMAGES:movetofolder_s"} = False Then ef = True
      If image_LoadShape{#view, "TBIMAGES:preview"} = False Then ef = True
      If image_LoadShape{#view + #selectedoffset, "TBIMAGES:preview_s"} = False Then ef = True
      If image_LoadShape{#rename, "TBIMAGES:rename"} = False Then ef = True
      If image_LoadShape{#rename + #selectedoffset, "TBIMAGES:rename_s"} = False Then ef = True
      If image_LoadShape{#open, "TBIMAGES:run"} = False Then ef = True
      If image_LoadShape{#open + #selectedoffset, "TBIMAGES:run_s"} = False Then ef = True
      If image_LoadShape{#selectall, "TBIMAGES:file_selectall"} = False Then ef = True
      If image_LoadShape{#selectall + #selectedoffset, "TBIMAGES:file_selectall_s"} = False Then ef = True
      If image_LoadShape{#sortbydate, "TBIMAGES:sort"} = False Then ef = True
      If image_LoadShape{#sortbydate + #selectedoffset, "TBIMAGES:sort_s"} = False Then ef = True
      If image_LoadShape{#viewtype, "TBIMAGES:selecttoggle"} = False Then ef = True
      If image_LoadShape{#viewtype + #selectedoffset, "TBIMAGES:selecttoggle_s"} = False Then ef = True
      If image_LoadShape{#sortbysize, "TBIMAGES:sort"} = False Then ef = True
      If image_LoadShape{#sortbysize + #selectedoffset, "TBIMAGES:sort_s"} = False Then ef = True
      If image_LoadShape{#sort, "TBIMAGES:sortingandgrouping"} = False Then ef = True
      If image_LoadShape{#sort + #selectedoffset, "TBIMAGES:sortingandgrouping_s"} = False Then ef = True
      If image_LoadShape{#viewfiles, "TBIMAGES:viewas_icons"} = False Then ef = True
      If image_LoadShape{#viewfiles + #selectedoffset, "TBIMAGES:viewas_icons_s"} = False Then ef = True
      If image_LoadShape{#onlyicons, "TBIMAGES:viewas_icons"} = False Then ef = True
      If image_LoadShape{#onlyicons + #selectedoffset, "TBIMAGES:viewas_icons_s"} = False Then ef = True
      If image_LoadShape{#allfiles, "TBIMAGES:viewas_icons"} = False Then ef = True
      If image_LoadShape{#allfiles + #selectedoffset, "TBIMAGES:viewas_icons_s"} = False Then ef = True
      If image_LoadShape{#shell, "TBIMAGES:shell"} = False Then ef = True
      If image_LoadShape{#shell + #selectedoffset, "TBIMAGES:shell_s"} = False Then ef = True
      If image_LoadShape{#unpack, "TBIMAGES:archiveextract"} = False Then ef = True
      If image_LoadShape{#unpack + #selectedoffset, "TBIMAGES:archiveextract_s"} = False Then ef = True
      If image_LoadShape{#viewlha, "TBIMAGES:archiveview"} = False Then ef = True
      If image_LoadShape{#viewlha + #selectedoffset, "TBIMAGES:archiveview_s"} = False Then ef = True
      If image_LoadShape{#pack, "TBIMAGES:archiveadd"} = False Then ef = True
      If image_LoadShape{#pack + #selectedoffset, "TBIMAGES:archiveadd_s"} = False Then ef = True
      If image_LoadShape{#find, "TBIMAGES:find"} = False Then ef = True
      If image_LoadShape{#find + #selectedoffset, "TBIMAGES:find_s"} = False Then ef = True
      If image_LoadShape{#help, "TBIMAGES:help"} = False Then ef = True
      If image_LoadShape{#help + #selectedoffset, "TBIMAGES:help_s"} = False Then ef = True
      If image_LoadShape{#sortbytype, "TBIMAGES:sort"} = False Then ef = True
      If image_LoadShape{#sortbytype + #selectedoffset, "TBIMAGES:sort_s"} = False Then ef = True

      If ef = False
        CNIF #debug
          NPrint "Failed to load"
        CEND
        prefs\gadgetw = ShapeWidth(1)
        prefs\gadgeth = ShapeHeight(1)
        prefs\spacerw = prefs\gadgetw / 2 + 2

        For i.w = 1 To #allgadgets
          ShapesBitMap i, 1


          Use BitMap 1

          bgcol.w = Point(0, 0)
          CNIF #debug
            NPrint "Background Pen: ", bgcol
          CEND

          ReMap bgcol, 0

          ShapesBitMap i + #selectedoffset, 1


          Use BitMap 1

          bgcol.w = Point(0, 0)
          CNIF #debug
            NPrint "Background Pen: ", bgcol
          CEND

          ReMap bgcol, 0


        Next i
      End If
      calculatexpos{}
    Else
      Request "DrawerGenie", "Error - AISS not found. Switching to normal toolbar", "Continue"
      prefs\useaiss = False
    End If
  End If

  If prefs\useaiss = False
    If prefs\toolbar = ""
      prefs\toolbar = "default.iff"
    End If

    tb$ = dos_AddPart{"Toolbars", prefs\toolbar}
    toolbarfn$ = dos_AddPart{prefs\homedir, tb$}

    If dos_Exist{toolbarfn$} = False
      Request "DrawerGenie", "Error - Unable to find DrawerGenie files|Can't find " + toolbarfn$ + "|Please select where the DrawerGenie files are located", "Continue"
      pt$ = prefs\homedir
      If aslfr_Request{1, False, False, True}
        pt$ = aslfr_GetPath{1}
        toolbarfn$ = dos_AddPart{pt$, tb$}

        If dos_Exist{toolbarfn$} = False
          Request "DrawerGenie", "Error - Files could not be found|Please quit and try again", "Quit"
          End
        End If

      Else
        End
      End If
    End If

    ILBMInfo toolbarfn$
    bmapw.w = ILBMWidth
    bmaph.w = ILBMHeight
    bmapd.w = ILBMDepth
    ;LoadPalette 0, toolbarfn$
    prefs\gadgetw = bmapw / #allgadgets
    prefs\gadgeth = bmaph / 2
    prefs\spacerw = prefs\gadgetw / 2 + 2
    ;BitMap 0, bmapw, bmaph, bmapd ;#allgadgets * prefs\gadgetw, prefs\gadgeth * 2, 2

    ;LoadShape 0, toolbarfn$
    image_LoadShape{0, toolbarfn$} ;, $CCCCCC}
    ShapesBitMap 0, 0


    Use BitMap 0

    bgcol.w = Point(1, 1)
    CNIF #debug
      NPrint "Background Pen: ", bgcol
    CEND

    ReMap bgcol, 0


    For i.w = 0 To 1
      For j.w = 0 To #allgadgets - 1
        GetaShape i * #selectedoffset + j + 1, j * prefs\gadgetw, i * prefs\gadgeth, prefs\gadgetw, prefs\gadgeth
      Next j
    Next i

    Free BitMap 0
    ;image_LoadShape{1, "TBIMAGES:avatar_admin"}
    calculatexpos{}
  End If

End Statement



Statement changetoolbar{}
  SHARED prefs, helpers(), lastgadget, gadgets()
  USEPATH helpers(i)
  Dim isopen.b(#maxhelpers)

  For i.w = 1 To #maxhelpers
    If helpers(i)\inuse
      isopen(i) = True
      CloseWindow i
      Free GTList i
    End If
  Next i

  For i = #back To #sortbytype
    Free Shape i
  Next i

  processtoolbar{}


  For i = 1 To #maxhelpers
    If isopen(i)
      flags.l = #WFLG_BORDERLESS
      \helperh =  prefs\gadgeth + 2
      \helperwinaddr = Window(i, \helperx, \helpery, \helperw, \helperh, flags, "", 1, 2)
      DefaultOutput

      If \helperwinaddr
        GTGZZPosition On
        xpos.w = 1
        For j.w = 0 To lastgadget ;#maxgadgets - 1
          If gadgets(j) > 0
            CNIF #debug
              NPrint "Creating gadget ", gadgets(j)
            CEND
            If gadgets(j) = 999
              xpos + prefs\spacerw
            Else
              If gadgets(j) = #source OR gadgets(j) = #dest
                flags = $2000
              Else
                flags = 0
              End If
              flags + $80 ; Report gadget down event
              succ.l = GTShape(i, gadgets(j), xpos, 1, flags, gadgets(j), gadgets(j) + #selectedoffset)
              xpos + prefs\gadgetw ; 16
            End If
          End If
        Next j
        AttachGTList i, i
        GTBevelBox i, 0, 0, \helperw, \helperh, 0
        ;GTDisable newhelperid, 1

      Else
        Request "DrawerGenie", "Error - Unable to open helper window", "Cancel"
        \inuse = False
      End If

    End If
  Next i



  USELASTPATH
End Statement

Statement getprefs{}
  SHARED prefs, toolbar$(), tbcount

  prefs\viewer = GTGetString(0, #p_viewer)
  prefs\closeprevious = GTStatus(0, #p_closeprev)
  prefs\scrolldown = GTStatus(0, #p_adjustdrawer)

  useaiss.w = GTStatus(0, #p_useaiss)
  toolbarchanged.b = False
  If useaiss <> prefs\useaiss
    toolbarchanged = True
  End If
  prefs\useaiss = useaiss

  hk$ = GTGetString(0, #p_toolbarhotkey)
  If hk$ <> prefs\toolbarhotkey
    CNIF #debug
      NPrint "Setting hotkey: ", SetHotKey(#h_toolbar, hk$)
    CEND
  End If
  prefs\toolbarhotkey = hk$

  hk$ = GTGetString(0, #p_openhotkey)
  If hk$ <> prefs\toolbarhotkey
    CNIF #debug
      NPrint "Setting hotkey: ", SetHotKey(#h_open, hk$)
    CEND
  End If
  prefs\openhotkey = hk$

  prefs\homedir = GTGetString(0, #p_homedir)

  currentoption.w = GTGetAttrs(0, #p_toolbar, #GTCY_Active)
  ResetList toolbar$()
  For i.w = 0 To currentoption
    x.w = NextItem(toolbar$())
  Next i

  If prefs\toolbar <> toolbar$()
    prefs\toolbar = toolbar$()
    ;Request "DrawerGenie", "Warning: Toolbar changes to no take effect until|DrawerGenie is restarted", "Ok"
    toolbarchanged = True
  End If

  prefs\pollperiod = GTGetAttrs(0, #p_pollperiod, #GTSL_Level)
  ;prefs\pollperiod = GTGetInteger(0, #p_pollperiod)
  If prefs\pollperiod < 1 Then prefs\pollperiod = 1
  If prefs\pollperiod > 20 Then prefs\pollperiod = 20
  prefs\archiver = GTGetAttrs(0, #p_archiver, #GTCY_Active)


  If toolbarchanged
    CNIF #debug
      NPrint "Toolbar changed"
    CEND
    changetoolbar{}
  End If

  CNIF #debug
    NPrint "Toolbar selected: ", toolbar$()
  CEND
End Statement


;Statement disablehelper{ew.w}
;  SHARED helpers(), gadgets()
;
;  If helpers(ew)\winlock = 0 ;progressopen = False
;
;    helpers(ew)\winlock = AllocMem_(SizeOf.Requester, 1)
;    If helpers(ew)\winlock
;
;      winptr.l = Peek.l(Addr Window(ew))
;      InitRequester_(helpers(ew)\winlock)
;      If Request_(helpers(ew)\winlock, winptr)
;        SetWindowPointerA_ winptr, Tags(#WA_BusyPointer, -1)
;      Else
;        FreeMem_ helpers(ew)\winlock, SizeOf.Requester
;        helpers(ew)\winlock = 0
;      EndIf
;    End If
;  End If
;
;End Statement
;
;
;Statement enablehelper{ew.w}
;  SHARED helpers(), gadgets()
;
;  If helpers(ew)\winlock <> 0
;    winptr.l = Peek.l(Addr Window(ew))
;    SetWindowPointerA_ winptr, Tags(#TAG_END, 0)
;    EndRequest_ helpers(ew)\winlock, winptr
;    FreeMem_ helpers(ew)\winlock, SizeOf.Requester
;    helpers(ew)\winlock = 0
;  End If
;
;End Statement


Function.w opendropdown{ew.w, gh.w, count.b}
  SHARED helpers(), borderwidths, gadgetxpos(), prefs
  popupx.w = helpers(ew)\helperx + gadgetxpos(gh)
  popupy.w = helpers(ew)\helpery + prefs\gadgeth + 2
  popuph.w = prefs\gadgeth * count + 2

  flags.l = #WFLG_BORDERLESS
  If Window(#w_popup, popupx, popupy, prefs\gadgetw + 2, popuph, flags, "", 1, 2)

    GTGZZPosition On
    DefaultOutput

    Select gh
      Case #viewtype
        GTShape #w_popup, 1, 1, 1, 0, #textview, #textview + #selectedoffset
        GTShape #w_popup, 2, 1, prefs\gadgeth + 1, 0, #iconview, #iconview + #selectedoffset

      Case #sort
        GTShape #w_popup, 1, 1, 1, 0, #sortalpha, #sortalpha + #selectedoffset
        GTShape #w_popup, 2, 1, prefs\gadgeth + 1, 0, #sortbydate, #sortbydate + #selectedoffset
        GTShape #w_popup, 3, 1, prefs\gadgeth * 2 + 1, 0, #sortbysize, #sortbysize + #selectedoffset
        GTShape #w_popup, 4, 1, prefs\gadgeth * 3 + 1, 0, #sortbytype, #sortbytype + #selectedoffset

      Case #viewfiles
        GTShape #w_popup, 1, 1, 1, 0, #onlyicons, #onlyicons + #selectedoffset
        GTShape #w_popup, 2, 1, prefs\gadgeth + 1, 0, #allfiles, #allfiles + #selectedoffset

    End Select

    AttachGTList #w_popup, #w_popup
    GTBevelBox #w_popup, 0, 0, prefs\gadgetw + 2, popuph, 0

    prevgad.w = 0

    While Joyb(0) ; Bad Rob!
      Delay_ 1
      ev.l = Event

      mx.w = SMouseX - popupx
      my.w = SMouseY - popupy
      currentgad.w = 0
      If mx > 1
        If mx < prefs\gadgeth + 1
          If my > 1
            If my < prefs\gadgeth * count + 1
              currentgad.w = my / prefs\gadgeth + 1
              If currentgad
                GTToggle #maxhelpers + 1, currentgad, On
              End If

            End If
          End If
        End If
      End If


      If currentgad <> prevgad
        If prevgad ; erase previous border
          GTToggle #maxhelpers + 1, prevgad, Off
        End If
        prevgad = currentgad
      End If


    End While


    DetachGTList #w_popup
    CloseWindow #w_popup
    Free GTList #w_popup

  Else
    CNIF #debug
      NPrint "Error opening popup window"
    CEND
  End If
  Function Return currentgad
End Function


Function.w stringpixels{text$}
  SHARED helpers(), ew, *wbscreen

  If ew > 0
    *win.Window = helpers(ew)\helperwinaddr
    result.w = TextLength_(*win\RPort, text$, Len(text$))
  Else
    result.w = 0
  End If
  Function Return result
End Function


Statement setcurrentgadget{gad.w}
  SHARED selectedgadgets()

  ResetList selectedgadgets()
  For i.w = 0 To gad
    x.l = NextItem(selectedgadgets())
  Next i
End Statement


Statement openedittoolbar{}
  SHARED prefs, gadgets(), allgadgets(), selectedgadgets(), availablegadgets(), toolbareditopen, fontysize, lastgadget
  sw.w = ScreenWidth
  sh.w = ScreenHeight

  winw.w = 500
  winh.w = 200
  winx.w = sw / 2 - winw / 2
  winy.w = sh / 2 - winh / 2

  flags.l = #WFLG_ACTIVATE|#WFLG_CLOSEGADGET|#WFLG_DEPTHGADGET|#WFLG_DRAGBAR
  If Window(#w_toolbaredit, winx, winy, winw, winh, flags, "DrawerGenie - Edit Toolbar", 1, 2)
    GTGZZPosition Off
    toolbareditopen = True
    DefaultOutput

    iw.w = InnerWidth
    ih.w = InnerHeight

    butw.w = iw / 2 - 7
    buth.w = fontysize + 6

    butw2.w = iw - 400 - 20
    ClearList selectedgadgets()
    For i.w = 0 To lastgadget
      If gadgets(i)
        If AddItem(selectedgadgets())
          If gadgets(i) = 999
            selectedgadgets()\id = 999
            selectedgadgets()\name = allgadgets(0)\name
          Else
            selectedgadgets()\id = gadgets(i)
            selectedgadgets()\name = allgadgets(gadgets(i))\name
          End If
        End If
      End If
    Next i

    GTNewLookProp On

    GTTags #GTLV_ShowSelected, 0
    GTListView #w_toolbaredit, #e_allgadgets, 5, 25, 200, ih - 60, "Available Gadgets", #PLACETEXT_ABOVE, availablegadgets(), 0

    GTTags #GTLV_ShowSelected, 0
    GTListView #w_toolbaredit, #e_toolbar, iw - 205, 25, 200, ih - 60, "Toolbar", #PLACETEXT_ABOVE, selectedgadgets(), 0

    GTButton #w_toolbaredit, #e_add, 210, 25, butw2, buth, "Add", #PLACETEXT_IN
    GTButton #w_toolbaredit, #e_remove, 210, 49, butw2, buth, "Remove", #PLACETEXT_IN
    GTButton #w_toolbaredit, #e_moveup, 210, 80, butw2, buth, "Up", #PLACETEXT_IN
    GTButton #w_toolbaredit, #e_movedown, 210, 104, butw2, buth, "Down", #PLACETEXT_IN


    GTButton #w_toolbaredit, #e_use, 5, ih - buth - 5, butw, buth, "Use", #PLACETEXT_IN
    GTButton #w_toolbaredit, #e_cancel, iw - butw - 5, ih - buth - 5, butw, buth, "Cancel", #PLACETEXT_IN
    AttachGTList #w_toolbaredit, #w_toolbaredit
    GTBevelBox #w_toolbaredit, 0, 0, iw, ih, 0

    setcurrentgadget{0}
  Else
    Request "DrawerGenie", "Error - Unable to open Edit Toolbar window", "Cancel"
    CNIF #debug
      NPrint "Error opening edit toolbar window"
    CEND
  End If
End Statement


Statement closeedittoolbar{}
  SHARED prefs, gadgets(), toolbareditopen

  DetachGTList #w_toolbaredit
  CloseWindow #w_toolbaredit
  Free GTList #w_toolbaredit
  toolbareditopen = False
End Statement

                                                                                                                                                                                                                                                        

                                                                                                                                                                                                                                             
